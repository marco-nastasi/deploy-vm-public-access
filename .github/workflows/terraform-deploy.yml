name: 2 - Deploy plan to AWS

permissions: {}

on:
  workflow_dispatch: # Trigger manually

jobs:
  check-plan:

    permissions:
        id-token: write
        contents: read

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Check status of the first workflow
        id: check-first-workflow
        uses: actions/github-script@v6
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'terraform-plan.yml',  // Name of the first workflow file
              branch: 'main',  // Branch to check
              event: 'push',   // Event that triggered the first workflow
              status: 'completed',
              per_page: 1
            });
    
            if (runs.total_count === 0) {
              throw new Error('No completed runs found for the first workflow.');
            }
    
            const latestRun = runs.workflow_runs[0];
            if (latestRun.conclusion !== 'success') {
              throw new Error(`The first workflow did not succeed. Conclusion: ${latestRun.conclusion}`);
            }
    
            return latestRun.conclusion;
    
      - name: Run some steps
        if: steps.check-first-workflow.outcome == 'success'
        run: echo "Running the second workflow because the first workflow succeeded"

  deploy:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: check-plan

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ vars.TF_VERSION }}

      - name: Configure AWS OIDC credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
          mask-aws-account-id: true

      - name: Terraform Init
        id: terraform-init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TFSTATE_BUCKET_NAME }}" \
            -backend-config="key=${{ secrets.TFSTATE_BUCKET_PATH }}" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TFSTATE_TABLE_NAME }}"

      - name: Download plan from S3 bucket
        run: |
          aws s3 cp s3://${{ secrets.TFSTATE_BUCKET_NAME }}/plan/output.tfplan \
          output.tfplan

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve output.tfplan